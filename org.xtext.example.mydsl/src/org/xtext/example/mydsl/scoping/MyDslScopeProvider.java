/*
 * generated by Xtext 2.20.0
 */
package org.xtext.example.mydsl.scoping;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.xtext.example.mydsl.myDsl.Dictionary;
import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Rule;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class MyDslScopeProvider extends AbstractMyDslScopeProvider {

	
	@Override
	public IScope getScope(EObject context, EReference ref) {

		if (ref == MyDslPackage.Literals.VALUE__VALUE1) {
 			if (context instanceof Entity) {
 				// Entity from the same has valid name value
 				// Entity from different file has null name value
				System.out.println (((Entity) context).getName());
			}
		}	
		
		return super.getScope(context, ref);
	}
	
}
